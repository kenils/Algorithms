'''
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

Example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

Note: This just contains the main logic for the question

'''
class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.children={}
        self.endHere=False
        

    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        parent=self
        for i,char in enumerate(word):
            if(char not in parent.children):
                parent.children[char]=WordDictionary()
            parent=parent.children[char]
            if(i==len(word)-1):
                parent.endHere=True
            
        

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        parent=self
        for i,char in enumerate(word):
            if(char=='.'):
                for child,obj in parent.children.items():
                    if(child!=None and obj.search(word[i+1:])):
                        return True
                return False
            if(char not in parent.children):
                return False
            parent=parent.children[char]
        return parent.endHere
        
