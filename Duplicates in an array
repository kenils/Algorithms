'''
Given an array of n elements which contains elements from 0 to n-1, with any of these numbers appearing any number of times.
Find these repeating numbers in O(n) and using only constant memory space. It is required that the order in which elements repeat should be maintained. 
If there is no repeating element present then print -1.

Input : arr[] = {1, 2, 3, 1, 3, 6, 6}
Output : 1, 3, 6
Elements 1, 3 and 6 are repeating.
Second occurrence of 1 is found
first followed by repeated occurrence
of 3 and 6.

Input : arr[] = {0, 3, 1, 3, 0}
Output : 3, 0
Second occurrence of 3 is found
first followed by second occurrence 
of 0.

Note: This problem takes into consideration that the input array will have number from 0 to n-1.
Where n is the length of the array
'''
n=int(input())
arr=list(map(int,input().strip().split()))
f1=0
for i in range(len(arr)):
    if(arr[arr[i]%n]>=n): #If this condition is true then it means element occurred more than one times
        if(arr[arr[i]%n]<2*n): #This condition checks whether or not it's repeated twice
            f1=1
            print(arr[i]%n,end=" ")
        
    arr[arr[i]%n]+=n #This will add n to the first occurence of a number
if(f1==0):
    print(-1)
